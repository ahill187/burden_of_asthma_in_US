plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="pie-donut")
chart_link
p
p()
plotly(p)
ggplotly(p)
g <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g <- mtcars %>%
group_by(manuf) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
mtcars$manuf <- sapply(strsplit(rownames(mtcars), " "), "[[", 1)
g <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
mtcars$manuf
mtcars
g <- mtcars %>%
group_by(manuf) %>%
plot_ly(labels = ~manuf, values = ~gear) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
group_by(manuf)
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
mtcars
mtcars$manuf
unique(mtcars$manuf)
??add_pie
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count, colors=c("blue")) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count, colors=c("black")) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count, colors=rep("black", 22)) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
mtcars
mtcars$colors = rep("black", 22)
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count, marker=list(colors = ~colors)) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
mtcars$colors = rep("black", 32)
g <- mtcars %>%
group_by(manuf) %>%
summarise(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count, marker=list(colors = ~colors)) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g
mtcars
runApp('FalseCreekR')
shiny::runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
pollData
pollData$data
pollData$addResponse(3)
pollData$data
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
shiny::runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
runApp('FalseCreekR')
shiny::runApp('RESP_CORE/burden_of_asthma_in_US')
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("maps")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("mapproj")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("hunspell")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("rgdal")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("rgeos")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("shinyjs")
runApp('RESP_CORE/burden_of_asthma_in_US')
install.packages("shinythemes")
runApp('RESP_CORE/burden_of_asthma_in_US')
install_github("shiny", "ahill187")
shiny::runApp('RESP_CORE/burden_of_asthma_in_US')
devtools::install_github("ahill187/shiny")
devtools::install_github("ahill187/shinydashboard2")
shiny::runApp('RESP_CORE/burden_of_asthma_in_US')
.rs.restartR()
shiny::runApp('RESP_CORE/burden_of_asthma_in_US')
devtools::install_github("ahill187/shiny")
.rs.restartR()
devtools::install_github("ahill187/shiny")
warnings()
devtools::install_github("ahill187/shiny", force=TRUE)
.rs.restartR()
detach("package:shinythemes", unload=TRUE)
library("shinythemes", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:shinythemes", unload=TRUE)
detach("package:shinydashboard2", unload=TRUE)
detach("package:shiny", unload=TRUE)
detach("package:scales", unload=TRUE)
detach("package:raster", unload=TRUE)
detach("package:R6", unload=TRUE)
detach("package:plotly", unload=TRUE)
detach("package:leaflet", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:datasets", unload=TRUE)
devtools::install_github("ahill187/shiny", force=TRUE)
shiny::runApp('RESP_CORE/burden_of_asthma_in_US')
detach("package:shinydashboard2", unload=TRUE)
devtools::install_github("ahill187/shinydashboard2", force=TRUE)
runApp('RESP_CORE/burden_of_asthma_in_US')
library(shinydashboard2)
??shinydashboard2
runApp('RESP_CORE/burden_of_asthma_in_US')
runApp('RESP_CORE/burden_of_asthma_in_US')
metaData@app_title
load(file="./data/metaData.RData")
getwd()
setwd("/Users/Ainsleigh/RESP_CORE/burden_of_asthma_in_US/")
load(file="/data/metaData.RData")
load(file="./data/metaData.RData")
metaData@app_title
dashboardPage(skin=appLayout$dashboardColour,
# header
dashboardHeader(title=metaData@app_title, titleWidth=320),
# sidebar
dashboardSidebar(
sidebarMenu(id="selectedTab",
menuItem(tab_titles[1], tabName = "costTab", icon = icon("dollar sign", lib="font-awesome"),
menuSubItem("Map", tabName=metaData@tab_ids[1],icon=icon("globe americas", lib="font-awesome")),
menuSubItem("Graph", tabName=metaData@tab_ids[2], icon=icon("bar-chart", lib="font-awesome"))),
menuItem(tab_titles[2], tabName = "qalyTab", icon = icon("sort numeric up", lib="font-awesome"),
menuSubItem("Map", tabName="tab3",icon=icon("globe americas", lib="font-awesome")),
menuSubItem("Graph", tabName="tab4",icon=icon("bar-chart", lib="font-awesome"))),
menuItem(tab_titles[3], tabName = "tab5", icon = icon("address-book", lib="font-awesome")),
menuItem(tab_titles[4], tabName = "tab6", icon = icon("balance-scale", lib="font-awesome"))
)
),
# body
dashboardBody(asList = T,
shinyjs::useShinyjs(),
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
))
load(file="./data/metaData.RData")
load(file="./data/cleanedRawData.RData")
load(file="./data/leafletMapList.RData")
s_tabs = c(2,3)
tab_titles = metaData@tab_titles
i=1
appLayout <- AppLayout$new(6, "burdenOfAsthma")
initialize = TRUE
cat("~~~ Starting UI ~~~", fill=T)
dashboardPage(skin=appLayout$dashboardColour,
# header
dashboardHeader(title=metaData@app_title, titleWidth=320),
# sidebar
dashboardSidebar(
sidebarMenu(id="selectedTab",
menuItem(tab_titles[1], tabName = "costTab", icon = icon("dollar sign", lib="font-awesome"),
menuSubItem("Map", tabName=metaData@tab_ids[1],icon=icon("globe americas", lib="font-awesome")),
menuSubItem("Graph", tabName=metaData@tab_ids[2], icon=icon("bar-chart", lib="font-awesome"))),
menuItem(tab_titles[2], tabName = "qalyTab", icon = icon("sort numeric up", lib="font-awesome"),
menuSubItem("Map", tabName="tab3",icon=icon("globe americas", lib="font-awesome")),
menuSubItem("Graph", tabName="tab4",icon=icon("bar-chart", lib="font-awesome"))),
menuItem(tab_titles[3], tabName = "tab5", icon = icon("address-book", lib="font-awesome")),
menuItem(tab_titles[4], tabName = "tab6", icon = icon("balance-scale", lib="font-awesome"))
)
),
# body
dashboardBody(asList = T,
shinyjs::useShinyjs(),
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
))
ui <- dashboardPage(skin=appLayout$dashboardColour,
# header
dashboardHeader(title=metaData@app_title, titleWidth=320),
# sidebar
dashboardSidebar(
# sidebarMenu(id="selectedTab",
#   menuItem(tab_titles[1], tabName = "costTab", icon = icon("dollar sign", lib="font-awesome"),
#            menuSubItem("Map", tabName=metaData@tab_ids[1],icon=icon("globe americas", lib="font-awesome")),
#            menuSubItem("Graph", tabName=metaData@tab_ids[2], icon=icon("bar-chart", lib="font-awesome"))),
#
#   menuItem(tab_titles[2], tabName = "qalyTab", icon = icon("sort numeric up", lib="font-awesome"),
#            menuSubItem("Map", tabName="tab3",icon=icon("globe americas", lib="font-awesome")),
#            menuSubItem("Graph", tabName="tab4",icon=icon("bar-chart", lib="font-awesome"))),
#
#
#   menuItem(tab_titles[3], tabName = "tab5", icon = icon("address-book", lib="font-awesome")),
#   menuItem(tab_titles[4], tabName = "tab6", icon = icon("balance-scale", lib="font-awesome"))
# )
),
# body
dashboardBody(asList = T,
shinyjs::useShinyjs(),
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
))
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
a[[1]]
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
b
??tabItems
library(shinydashboard2)
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
tabItems <- function(asList = F, ...) {
lapply(list(...), tagAssert, class = "tab-pane")
div(class = "tab-content", ...)
}
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
a[[1]]
a[[2]]
tabItems <- function(asList = F, ...) {
lapply(list(...), tagAssert, class = "tab-pane")
print(list(...))
div(class = "tab-content", ...)
}
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
tabItems <- function(asList = F, ...) {
print(list(...))
#lapply(list(...), tagAssert, class = "tab-pane")
#div(class = "tab-content", ...)
}
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
tabItems <- function(asList = F, ...) {
return(list(...))
#lapply(list(...), tagAssert, class = "tab-pane")
#div(class = "tab-content", ...)
}
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
b[[1]]
b[[2]]
b[[1]][[1]]
tabItems <- function(asList = F, ...) {
return(...)
#lapply(list(...), tagAssert, class = "tab-pane")
#div(class = "tab-content", ...)
}
b[[1]][[1]]
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
tabItems <- function(asList = F, ...) {
if(asList) {
args = (...)
}
return(args)
#lapply(list(...), tagAssert, class = "tab-pane")
#div(class = "tab-content", ...)
}
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
b
b[[1]]
b[[2]]
b[[3]]
tabItems <- function(asList = F, ...) {
if(asList) {
args = (...)
} else {
args = list(...)
}
lapply(args, tagAssert, class = "tab-pane")
div(class = "tab-content", ...)
}
b=tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
devtools::install_github("ahill187/shinydashboard2", force=TRUE)
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
library(shinydashboard2)
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
.rs.restartR()
runApp()
tabItems <- function(asList = F, ...) {
if(asList) {
args = list(...)
} else {
args = list(...)
}
lapply(args, tagAssert, class = "tab-pane")
div(class = "tab-content", ...)
}
runApp()
tabItems
dashboardPage("wh")
tabItems
runApp()
div(tags$section())
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
source("./R/MetaData.R")
source("./R/helper_functions.R")
load(file="./data/metaData.RData")
load(file="./data/cleanedRawData.RData")
load(file="./data/leafletMapList.RData")
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
div(tags$section(a))
y=div(tags$section(a))
y
y[[1]]
y$children
y$children[[1]]
y$attribs
y$children[[2]]
y$children[[1]][1]
y$children[[1]]$children
y$children[[1]]$children[[1]]
y$children[[1]]$children[[1]][[5]]
y$children[[1]]$children[[1]][[1]]
a = metaData@tabItemsList[[1]]$tabItem()
b = metaData@tabItemsList[[2]]$tabItem()
tabItems(a,b)
tabItems(asList=F, a, b)
tabItems(list(a,b))
tabItems(asList=F,list(a,b))
tabItems(asList=T,list(a,b))
dashboardBody(asList = T,
#shinyjs::useShinyjs(),
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
))
dashboardBody(asList = T,
#shinyjs::useShinyjs(),
tabItems(asList = T,
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
)
dashboardBody(asList = T,
#shinyjs::useShinyjs(),
tabItems(asList = T,
a
)
)
dashboardBody(asList = T,
#shinyjs::useShinyjs(),
tabItems(asList = F,
a
))
runApp()
devtools::install_github("ahill187/leaflet", force=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyjs::js$init()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$script("type")
tags$script(type="text")
tags$script(type="text", src="this")
runApp()
runApp()
runApp()
??V8
V8
v8()
library(V8)
v8()
runApp()
runApp()
install.packages("V8")
shiny::runApp()
ctx <- V8::v8()
ctx$source("https://cdnjs.cloudflare.com/ajax/libs/coffee-script/1.4.0/coffee-script.min.js")
jscode <- ctx$call("CoffeeScript.compile", "square = (x) -> x * x", list(bare = TRUE))
ctx$eval(jscode)
ctx$call("square", 9)
ctx$source(".R/jsfunctions.js")
getwd()
ctx$source("./R/jsfunctions.js")
shinyjs::extendShinyjs
ctx$source("https://www.gstatic.com/charts/loader.js")
ctx$source("./R/jsfunctions.js")
ctx$source("https://cdnjs.cloudflare.com/ajax/libs/coffee-script/1.4.0/coffee-script.min.js")
ctx$source("https://www.gstatic.com/charts/loader.js")
ctx$call("square", 9)
ctx$console()
