.rs.restartR()
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
RColorBrewer::brewer.pal(4, "YlGnBu")
coul=RColorBrewer::brewer.pal(4, "YlGnBu")
coul
colorRampPalette(coul)(25)
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
?eventReactive
runApp('burden_of_COPD')
runApp('burden_of_COPD')
province <- reactiveValues(default = "Canada")
province$default
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
sout <- function(...){
a = list(...)
for(arg in a){
print(a)
}
}
sout("free", "test")
sout <- function(...){
a = (...)
for(arg in a){
print(a)
}
}
sout("free", "test")
sout <- function(...){
a = list(...)
for(arg in a){
print(arg)
}
}
sout("free", "test")
sout <- function(...){
a = list(...)
for(arg in a){
cat(arg, fill=TRUE)
}
}
sout("free", "test")
a="test"
paste0(a,a)
sout <- function(...){
arguments <- list(...)
string <- ""
for(arg in arguments){
string <- paste0(string, " ", arg)
}
cat(string, fill=TRUE)
}
sout("free", "test")
is.character("free")
is.character(1)
paste0(1,"two")
paste0(list(a), "two")
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
integer(0)
a=integer(0)
is.null(a)
a
is.na(a)
length(a)
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
getwd()
shiny::runApp('burden_of_COPD')
??addLegend
getwd()
shiny::runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
getwd()
setwd("/home/ainsleighhill/BurdenOfAsthma/")
source("R/MetaData.R")
source("R/RawData.R")
source("R/DataSubClass.R")
source("R/DataSubClassYear.R")
source("R/TabItemDashMap.R")
source("R/TabItemDashGraph.R")
source("R/TabItemDashText.R")
source("R/settings.R")
dataSubClassNames = c("Year", "State", "Sex", "Age")
dataSubClasses = list(
"year"=DataSubClassYear$new(dataSubClassNames[1]),
"state"=DataSubClass$new(dataSubClassNames[2]),
"sex"=DataSubClass$new(dataSubClassNames[3]),
"age"=DataSubClass$new(dataSubClassNames[4])
)
fileName = paste0("static_data/WEBAPP_US.csv")
reNameIndices = c(5,6,7)
reName = c("indirectCost", "directCost", "qalyLost")
rawData = RawData$new(fileName, dataSubClasses, reNameIndices, reName)
data <- rawData$allData
data <- self$subsetData(data, ...)
subsetData = function(data,...){
args = list(...)
indices = c()
first = TRUE
for(arg in args){
arg = as.list(arg)
if(length(arg)!=2){
stop("Arguments must be list of length 2")
}
key = arg[[1]]
value = arg[[2]]
if(value!="all"){
indicesArg = which(data[[key]]==value)
if(!first){
indices = c(intersect(indices, indicesArg), intersect(indicesArg, indices))
} else{
indices = indicesArg
first = FALSE
}
}
}
indices = unique(indices)
subsettedData = data[indices,]
return(subsettedData)
}
data = subsetData(data, list("Year", 19), list("Sex", "Female"),
list("State", "Iowa"))
data
first = TRUE
for(dataSubClassName in self$dataSubClassNames){
if(first){
Legend <- interaction(data[[dataSubClassName]])
first = FALSE
} else {
Legend <- interaction(Legend, data[[dataSubClassName]], sep=" ")
}
}
for(dataSubClassName in dataSubClassNames){
#for(dataSubClassName in self$dataSubClassNames){
if(first){
Legend <- interaction(data[[dataSubClassName]])
first = FALSE
} else {
Legend <- interaction(Legend, data[[dataSubClassName]], sep=" ")
}
}
Legend
data$Legend <- Legend
data[[valueName]] = as.numeric(as.character(data[[valueName]]))
valueName = "directCost"
data[[valueName]] = as.numeric(as.character(data[[valueName]]))
data$value = data[[valueName]]
p <- ggplot(data, aes(x = Year, y=value, fill = Legend)) +
geom_bar(stat = "identity", position = "dodge")  +
labs(x="Year", y="")
#+ scale_y_continuous(label=scales::dollar_format(suffix = "M")) + theme_bw()
print(class(p))
ggplotly (p) %>% config(displaylogo=F, doubleClick=F,  displayModeBar=F,
modeBarButtonsToRemove=buttonremove) %>%
layout(xaxis=list(fixedrange=TRUE)) %>% layout(yaxis=list(fixedrange=TRUE))
dashGraph <- DashGraph$new(dataSubClassNames)
dashGraph$drawGraph(rawData, "directCost", list("Year", 19), list("Sex", "Female"),
list("State", "Iowa"))
runApp()
runApp()
??renderPlotly
runApp()
runApp()
runApp()
runApp()
class(p)
runApp()
runApp()
runApp()
runApp()
runApp()
data$value
Legend
dashGraph$drawGraph(rawData, "directCost", list("Year", 19), list("Sex", "Female"),
list("State", "Iowa"))
runApp()
runApp()
runApp()
runApp()
runApp('~/burden_of_COPD')
runApp()
runApp('~/burden_of_COPD')
.rs.restartR
.rs.restartR()
runApp()
runApp()
runApp()
dashGraph <- DashGraph$new(dataSubClassNames)
dashGraph$drawGraph(rawData, "directCost", list("Year", 19), list("Sex", "Female"),
list("State", "Iowa"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
}))
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
load(file="/data/metaData.RData")
getwd()
load(file="data/metaData.RData")
lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
a=lapply(1:metaData@tabs, function(i){
metaData@tabItemsList[[i]]$tabItem()
})
a
a[[1]]
a[[2]]
a[[4]]
a[[1]]
??renderPlotly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p
runApp()
a[[1]]
leafletOutput(outputId="testing")
runApp()
source("R/MetaData.R")
source("R/RawData.R")
source("R/DataSubClass.R")
source("R/DataSubClassYear.R")
source("R/TabItemDashMap.R")
source("R/TabItemDashGraph.R")
source("R/TabItemDashText.R")
source("R/settings.R")
dataSubClassNames = c("Year", "State", "Sex", "Age")
dataSubClasses = list(
"year"=DataSubClassYear$new(dataSubClassNames[1]),
"state"=DataSubClass$new(dataSubClassNames[2]),
"sex"=DataSubClass$new(dataSubClassNames[3]),
"age"=DataSubClass$new(dataSubClassNames[4])
)
fileName = paste0("static_data/WEBAPP_US.csv")
reNameIndices = c(5,6,7)
reName = c("indirectCost", "directCost", "qalyLost")
rawData = RawData$new(fileName, dataSubClasses, reNameIndices, reName)
tabItemsList = list(
"tab1" = TabItemDashMap$new(title = "Map",
inputId = "tab1",
mainBoxColor = "info",
valueBoxNumber = 4,
valueBoxWidths = c(6,6,4,8),
tabNumber = 1,
mapSettings = mapSettings1),
"tab2" = TabItemDashGraph$new(title = "Graph",
inputId = "tab2",
mainBoxColor = "info",
tabNumber = 2,
dropdownChoices = c("Direct Cost"="dc", "Indirect Cost"="ic"),
dropdownSelected = c("dc"),
sidebarChoicesNumber = length(dataSubClasses),
sidebarShownLabels = dataSubClassNames,
dataSubClasses = rawData$dataSubClasses),
"tab3" = TabItemDashMap$new(title = "Map",
inputId = "tab3",
mainBoxColor = "info",
valueBoxNumber = 4,
valueBoxWidths = c(6,6,4,8),
tabNumber = 3,
mapSettings = mapSettings2),
"tab4" = TabItemDashGraph$new(title = "Graph",
inputId = "tab4",
mainBoxColor = "info",
tabNumber = 4,
dropdownChoices = NULL,
dropdownSelected = NULL,
sidebarChoicesNumber = length(dataSubClasses),
sidebarShownLabels = dataSubClassNames,
dataSubClasses = rawData$dataSubClasses),
"tab5" = TabItemDashText$new(title = "About",
inputId = "tab5",
tabNumber = 5,
markdownFileName = "about.Rmd",
imageId = "image1"
),
"tab6" = TabItemDashText$new(title = "Terms",
inputId = "tab6",
tabNumber = 6,
markdownFileName = "disclaimer.rmd"
)
)
choices_gender <- list("female" = "Female",
"male" = "Male",
"all" = "all genders")
choices_age <- list("35-54" = "35",
"55-64" = "55",
"65-74" = "65",
"75 and older" = "75",
"all" = "all ages")
choices_prov <- list(
"Alberta" = "AB",
"British Columbia" = "BC",
"Manitoba" = "MB",
"New Brunswick" = "NB",
"Newfoundland and Labrador" = "NL",
"Nova Scotia" = "NS",
"Ontario" = "ON",
"Prince Edward Island" = "PE",
"Quebec" = "QC",
"Saskatchewan" = "SK",
"all" = "Canada")
choices_cost <- list("Total" = "sum",
"Inpatient" = "hosp",
"Outpatient" = "MSP",
"Pharma" = "pharm")
tab3 <- c("plotlyOutput", "download")
tab2 <- c("selectInput","infoBox","infoBox","infoBox","infoBox", "leafletOutput", "sliderInput")
tab1 <- c("selectInput", "plotlyOutput", "download")
tab4 <- c("infoBox","infoBox","infoBox","infoBox","leafletOutput", "sliderInput")
tab6 <- c("markdown")
tab5 <- c("markdown", "image")
tab2input <- c("costTypeMap", "sliderYear")
tab4input <- c()
tab3input <- c("plot_n_COPD")
tab1input <- c()
tab5input <- c()
tab6input <- c()
tab2id <- list("label" = c("costTypeMap","box1","box2", "box3","box4", "map", "sliderYear"),
"title" = c("Cost Map", "","","","","", "Year"),
"treatmentTypeTitles" = c("Inpatient", "Outpatient", "Medication",
"Total Cost for "),
"treatmentType" = c("hosp", "MSP", "pharm", "sum"),
"choices" = list(choices_cost),
"selected" = c("sum"),
"numberOfBoxes" = 4,
"boxLabel"="box",
"boxPrefix"="$",
"tabNumber"=2,
"boxSuffix"=c(" per Capita", ""),
"sliderSettings" = list("min"=2015,
"max"=2030,
"value"=2015,
"step"=NULL,
"round"=FALSE,
"ticks"=TRUE,
"sep"="",
"animate" = animationOptions(interval = 300,
loop = FALSE)),
"functions"=c("getMapData"))
tab3id <- list("label" = c("plot_n_COPD", "download_plot_n"),
"title" = c("", "Download Plot"),
"tabNumber"=3,
"png_name"="COPD_Projected_Prevalence_",
"functions"=c("n_copd_plot"))
tab1id <- list("label" = c("costType", "plot_cost", "download_plot_cost"),
"title" = c("Cost Type", "", "Download Plot"),
"choices" = list(choices_cost),
"tabNumber"=1,
"selected" = c("sum"),
"png_name"="COPD_Projected_cost_",
"functions"=c("cost_plot"))
tab4id <- list("label" = c("box01","box02", "box03","box04","map2", "sliderYear2"),
"title" = c("","","","", "Case Map", "", "Year"),
"choices" = list(choices_cost),
"numberOfBoxes"=4,
"tabNumber"=4,
"treatmentType" = c("hosp", "MSP", "pharm", "sum"),
"treatmentTypeTitles" = c("Inpatient", "Outpatient", "Medication",
"Total Cases in "),
"selected" = c("sum"),
"boxLabel" = "box0",
"boxPrefix"="",
"boxSuffix" = c(" per Capita"),
"sliderSettings" = list("min"=2015,
"max"=2030,
"value"=2015,
"step"=NULL,
"round"=FALSE,
"ticks"=TRUE,
"sep"="",
"animate" = animationOptions(interval = 300,
loop = FALSE)),
"functions"=c("getMapData"))
tab6id <- list("markdownFile"="disclaimer.rmd")
tab5id <- list("markdownFile"="about.Rmd","imFile"="logos2.png", "label"=c("","logos"))
metaData = new("MetaData")
metaData@app_title = "Burden of Asthma in US"
metaData@tabs = 6
metaData@tab_titles <- c("Cost", "QALY", "About", "Terms")
metaData@tab_ids <- c("tab1", "tab2", "tab3", "tab4", "tab5", "tab6")
metaData@sidebar = 3
metaData@sidebar_titles = c("Gender", "Age Group","Province")
metaData@sidebar_labels = c("Gender", "AgeGroup","Provinces")
metaData@sidebar_choices_long = list(choices_gender, choices_age, choices_prov)
metaData@sidebar_choices_short = list(list("all" = "All","select" = "Select"),
list("all" = "All","select" = "Select"),
list("all" = "All","select" = "Select"))
metaData@sidebar_skip = c(1)
metaData@tab_inout = list(tab1, tab2, tab3, tab4, tab5, tab6)
metaData@tab_settings = list(tab1id, tab2id, tab3id, tab4id, tab5id, tab6id)
metaData@tab_input = list(tab1input, tab2input, tab3input, tab4input, tab5input, tab6input)
metaData@tabItemsList = tabItemsList
save(metaData, file="data/metaData.RData")
save(rawData, file="data/cleanedRawData.RData")
runApp()
a[[2]]
plotlyOutput(outputId="testing")
runApp()
runApp()
runApp()
runApp()
radioButtons(inputId="radio1", label="test", choices=c(1,2), selected=1)
a[[1]][1]
a[[1]]$attribs
a[[1]]
a[[2]]
checkboxGroupInput(paste0(metaData@sidebar_labels[3], "2"),
label = NA,
choices = metaData@sidebar_choices_long[[3]],
selected = metaData@sidebar_choices_long[[3]]$all)
shinyjs::hidden(div(id=paste0(ids[3],"2"),
checkboxGroupInput(paste0(metaData@sidebar_labels[3], "2"),
label = NA,
choices = metaData@sidebar_choices_long[[3]],
selected = metaData@sidebar_choices_long[[3]]$all))
)
??shinyjs
runApp()
runApp()
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp()
runApp()
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
.rs.restartR
.rs.restartR()
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp('~/burden_of_COPD')
runApp()
runApp('~/burden_of_COPD')
runApp()
